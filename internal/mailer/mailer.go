package mailer

import (
	"fmt"
	"net/smtp"

	"github.com/rs/zerolog"
)

func SendRegistrationEmail(log *zerolog.Logger, eventName, status, recipientEmail string, timeout int) error {

	from := "testovyjtestovyj134@gmail.com"
	pass := "kbhc mqxv amed ljxd"

	var subject, body string
	switch status {
	case "confirmed":
		subject = "‚úÖ –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
		body = fmt.Sprintf("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ¬´%s¬ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n–ñ–¥—ë–º –≤–∞—Å!", eventName)
	case "canceled":
		subject = "‚ùå –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
		body = fmt.Sprintf("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ¬´%s¬ª –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –≤—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.", eventName)
	case "pending":
		subject = "‚ùå –í—ã –Ω–∞—á–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
		body = fmt.Sprintf("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–í—ã –Ω–∞—á–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ¬´%s¬ª. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ %v –º–∏–Ω—É—Ç.\n –í –∏–Ω–æ–º —Å–ª—É—á–∞–µ, –≤–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞.", eventName, timeout)

	}

	msg := fmt.Sprintf("From: %s\r\nTo: %s\r\nSubject: %s\r\n\r\n%s",
		from, recipientEmail, subject, body,
	)

	smtpServer := "smtp.gmail.com:587"
	auth := smtp.PlainAuth("", from, pass, "smtp.gmail.com")

	if err := smtp.SendMail(smtpServer, auth, from, []string{recipientEmail}, []byte(msg)); err != nil {
		log.Warn().Msgf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %v", recipientEmail, err)
		return fmt.Errorf("send email: %w", err)
	}

	log.Info().Msgf("üìß –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s (—Å—Ç–∞—Ç—É—Å: %s)", recipientEmail, status)
	return nil
}
